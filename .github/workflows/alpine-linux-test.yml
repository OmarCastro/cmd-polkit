# Simple workflow for deploying static content to GitHub Pages
name: Build and test for Alphine Linux aarch64

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "alphine-musl"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust-target: aarch64-unknown-linux-musl
            os-arch: aarch64
    env:
      CROSS_SYSROOT: /mnt/alpine-${{ matrix.os-arch }}
    steps:
      - name: Set up Alpine Linux for ${{ matrix.os-arch }} (target arch)
        id: alpine-target
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.os-arch }}
          branch: edge
          packages: >
            openrc
            dbus
            gcc
            meson
            musl
            musl-dev
            gcovr
            glib
            glib-dev
            json-glib
            json-glib-dev
            polkit
            polkit-dev
            gtk+3.0
            gtk+3.0-dev
            valgrind
          shell-name: alpine.sh
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup build-test
        run: |
          rc-service dbus start
          ${{ github.workspace }}/dev-tools/github-action-build-alphine-musl.sh
        shell: alpine.sh {0}
        continue-on-error: true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-alphine-musl
          path: 'build-alphine-musl'




